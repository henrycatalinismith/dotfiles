autocmd BufWinEnter * if &buftype != 'quickfix' && getcmdwintype() == '' | silent NERDTreeMirror | endif
autocmd VimEnter * if argc() == 0 | NERDTree | wincmd l | silent execute "terminal ++curwin" | endif
autocmd FileType nerdtree setlocal wincolor=NERDTreeNormal
autocmd! GUIEnter * set vb t_vb=
colorscheme solarized8
filetype plugin indent on
highlight! EndOfBuffer guifg=bg
highlight! GitGutterAdd    guibg=NONE
highlight! GitGutterChange guibg=NONE
highlight! GitGutterDelete guibg=NONE
highlight! LineNr guibg=#052c39 
highlight! NERDTreeNormal guibg=#0c313c
highlight! Normal guibg=#052c39 guifg=#fdf5dc
highlight! VertSplit guibg=#223d46
highlight! link SignColumn LineNr
inoremap <M-Down> <Esc>:m +1<CR>
inoremap <M-Up> <Esc>:m -2<CR>
let g:NERDTreeHighlightCursorline = 1
let g:NERDTreeMinimalUI=1
let g:NERDTreeMouseMode=2
let g:airline_extensions = []
let g:airline_powerline_fonts = 1 
let g:airline_theme='solarized'
let g:nerdtree_tabs_autofind = 1
let g:nerdtree_tabs_open_on_console_startup = 1
let g:nerdtree_tabs_open_on_new_tab = 1
let g:nerdtree_tabs_synchronize_view = 0
map <Space> <Leader>
map Q <nop>
map Y y$
nnoremap <C-S-Tab> :tabprevious<CR>
nnoremap <D-`> :tabnew \| terminal ++curwin<CR>
nnoremap <M-Down> :m .+1<CR>
nnoremap <M-Up> :m .-2<CR>
nnoremap <leader>p :GFiles<CR>
nnoremap <leader>q :quit!<CR>
nnoremap <leader>t :tabnew \| terminal ++curwin<CR>
nnoremap <leader>w :write<CR>
nnoremap <leader>wq :write<CR>:quit!<CR>
set bg=dark
set fillchars=""
set guifont=Iosevka:h18
set guioptions+=e
set ignorecase
set incsearch
set noerrorbells
set noswapfile
set novisualbell
set number
set showtabline=2
set signcolumn=yes
set smartindent
set updatetime=16
tnoremap <C-S-Tab> <C-\><C-N>:tabprevious<CR>
tnoremap <C-Tab> <C-\><C-N>:tabnext<CR>
tnoremap <D-`> <C-\><C-N>:tabnew \| terminal ++curwin<CR>
tnoremap <buffer> <ScrollWheelUp> <C-\><C-N><C-w>k

if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'typescript support using typescript-language-server',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
    \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
    \ 'whitelist': ['typescript', 'typescript.tsx', 'typescriptreact'],
    \ })
 end

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> gh <plug>(lsp-hover)
    nmap <buffer> <leader>. :LspCodeAction --ui=float<CR>

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

